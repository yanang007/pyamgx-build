name: Build pyamgx
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            cuda: "12.2.0"
          - os: windows-2022
            cuda: "11.8.0"
          - os: ubuntu-20.04
            cuda: "11.8.0"

    env:
      python_versions: "3.9,3.10,3.11"
      amgx_dir: "AMGX"
      pyamgx_dir: "pyamgx"
      amgx_build_dir: "build"
      config: "Release"

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Restore Cached AMGX
      id: restore-amgx
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.amgx_build_dir }}
        key: ${{ runner.os }}-${{ matrix.cuda }}-amgx

    - name: Setup CUDA (Linux)
      uses: Jimver/cuda-toolkit@v0.2.11
      if: steps.restore-amgx.outputs.cache-hit != 'true' && runner.os == 'Linux'
      id: setup-cuda-toolkit-linux
      with:
        cuda: ${{ matrix.cuda }}
        method: 'network'
        sub-packages: '["nvcc", "cudart", "thrust", "nvtx", "nvrtc-dev"]'
        non-cuda-sub-packages: '["libcurand-dev", "libcublas-dev", "libcusparse-dev", "libcusolver-dev"]'

    - name: Setup CUDA (Windows)
      uses: Jimver/cuda-toolkit@v0.2.11
      if: steps.restore-amgx.outputs.cache-hit != 'true' && runner.os == 'Windows'
      id: setup-cuda-toolkit-windows
      with:
        cuda: ${{ matrix.cuda }}
        method: 'network'
        sub-packages: '["nvcc", "curand_dev", "nvrtc_dev", "cudart", "thrust", "cublas_dev", "cusparse_dev", "cusolver_dev", "nvtx", "visual_studio_integration"]'

    - name: Configure CMake
      if: steps.restore-amgx.outputs.cache-hit != 'true'
      id: configure
      shell: bash
      run: cmake ${{ env.amgx_dir }} -B ${{ env.amgx_build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }}

    - name: Configure Error Processing
      if: ${{ (steps.restore-amgx.outputs.cache-hit != 'true') && (failure() && steps.configure.outcome == 'failure') || success() }}
      shell: bash
      run: |
          if [[ -d "${{ env.amgx_build_dir }}" ]]; then
            pushd "${{ env.amgx_build_dir }}"
            if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
              echo "---- CMakeFiles/CMakeOutput.log"
              cat CMakeFiles/CMakeOutput.log
              echo "----"
            fi
            if [[ -f "CMakeFiles/CMakeError.log" ]]; then
              echo "---- CMakeFiles/CMakeError.log"
              cat CMakeFiles/CMakeError.log
              echo "----"
            fi
          fi

    - name: Build AMGX
      if: steps.restore-amgx.outputs.cache-hit != 'true'
      working-directory: ${{ env.amgx_build_dir }}
      run: cmake --build . -j2 --config ${{ env.config }} --verbose --target amgxsh

    - name: Cache AMGX
      if: steps.restore-amgx.outputs.cache-hit != 'true'
      id: cache-amgx
      uses: actions/cache/save@v3
      with:
        path: ${{ env.amgx_build_dir }}
        key: ${{ steps.restore-amgx.outputs.cache-primary-key }}

    - name: Setup Nox
      uses: wntrblm/nox@2023.04.22
      with:
        python-versions: ${{ env.python_versions }}

    - name: Build pyamgx
      env:
        AMGX_DIR: ${{ env.amgx_dir }}
        AMGX_BUILD_DIR: ${{ env.amgx_build_dir }}
        NOXFORCEPYTHON: ${{ env.python_versions }}
      run: nox --noxfile ./scripts/build.py --sessions build_bdist

    - name: Rename Wheels
      shell: bash
      env:
        NEW_NAME: pyamgx-cu${{ matrix.cuda }}
      run: rename "s/pyamgx/$NEW_NAME/" ${{ env.pyamgx_dir }}/dist/*.whl

    - name: Upload Wheels
      uses: actions/upload-artifact@v4
      with:
        name: Wheels-${{ runner.os }}-cu${{ matrix.cuda }}
        path: ${{ env.pyamgx_dir }}/dist/*.whl
